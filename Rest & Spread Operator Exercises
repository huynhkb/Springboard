function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

/* Write an ES2015 Version */
Solution:
const filteroutOdds = (...args) => args.filter(numa => nums % 2 === 0);

__________________________________________________________________________________________

findMin
Write a function called findMin that accepts a variable number of arguments and returns the smallest argument.
Make sure to do this using the rest and spread operator.

const findMin = (...min) => min.reduce((min, currVal) => min < currVal ? min : currVal);
OR 
const findMin = (...min) => Math.min(...min)

__________________________________________________________________________________________

mergeObjects
Write a function called mergeObjects that accepts two objects and returns a new object which contains all the keys and values of the first object and second object.

const mergeObjects = (obj1, obj2) => ({...obj1, ...obj2});    //Remember to have parens around objs in arrow function

__________________________________________________________________________________________

doubleAndReturnArgs
Write a function called doubleAndReturnArgs which accepts an array and a variable number of arguments. The function should return a new array with the original array values and all of additional arguments doubled.

const doubleAndReturnArgs = (arr, ...args) => [...arr, ...args.map(val => val * 2)];

__________________________________________________________________________________________

Slice and Dice!
For this section, write the following functions using rest, spread and refactor these functions to be arrow functions!
Make sure that you are always returning a new array or object and not modifying the existing inputs.

/** remove a random element in the items array
and return a new array without that item. */

const removeRandom = items => {
  const idx = Math.floor(Math.random() * items.length);
  return [...items.slice(0, idx), ...items.slice(idx + 1)];
}

___________________________________________

/** Return a new array with every item in array1 and array2. */

const extend = (array1, array2) => {
 return [...array1, array2];
};

___________________________________________

/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal = (obj, key, val) => {
  return {...obj, [key]: val}
};

___________________________________________

/** Return a new object with a key removed. */

const removeKey = (obj, key) => {
  let newObj = {...obj};
  delete newObj[key];
  return newObj;
};

OR
*** Very confusing ***
const removeKey = (obj, key) => {
({ [key]: undefined, ...obj } = obj);
   return obj;
};
___________________________________________

/** Combine two objects and return a new object. */

const combine = (obj1, obj2) => {
 return {...obj1, ...obj2};
};

___________________________________________

/** Return a new object with a modified key and value. */

const update = (obj, key, val) => {
  return {...obj, [key]: val};
};



























